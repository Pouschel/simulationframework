### YamlMime:ManagedReference
items:
- uid: SimulationFramework.Keyboard
  commentId: T:SimulationFramework.Keyboard
  id: Keyboard
  parent: SimulationFramework
  children:
  - SimulationFramework.Keyboard.GetChars
  - SimulationFramework.Keyboard.IsAnyKeyDown
  - SimulationFramework.Keyboard.IsAnyKeyDown(SimulationFramework.Key[])
  - SimulationFramework.Keyboard.IsAnyKeyDown(System.ReadOnlySpan{SimulationFramework.Key})
  - SimulationFramework.Keyboard.IsAnyKeyPressed
  - SimulationFramework.Keyboard.IsAnyKeyPressed(SimulationFramework.Key[])
  - SimulationFramework.Keyboard.IsAnyKeyPressed(System.ReadOnlySpan{SimulationFramework.Key})
  - SimulationFramework.Keyboard.IsAnyKeyReleased
  - SimulationFramework.Keyboard.IsAnyKeyReleased(SimulationFramework.Key[])
  - SimulationFramework.Keyboard.IsAnyKeyReleased(System.ReadOnlySpan{SimulationFramework.Key})
  - SimulationFramework.Keyboard.IsKeyDown(SimulationFramework.Key)
  - SimulationFramework.Keyboard.IsKeyPressed(SimulationFramework.Key)
  - SimulationFramework.Keyboard.IsKeyReleased(SimulationFramework.Key)
  - SimulationFramework.Keyboard.KeyPressed
  - SimulationFramework.Keyboard.KeyReleased
  langs:
  - csharp
  - vb
  name: Keyboard
  nameWithType: Keyboard
  fullName: SimulationFramework.Keyboard
  type: Class
  source:
    remote:
      path: src/SimulationFramework/Keyboard.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: Keyboard
    path: src/SimulationFramework/Keyboard.cs
    startLine: 16
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  summary: Provides keyboard input to the simulation.
  example: []
  syntax:
    content: public static class Keyboard
    content.vb: Public Module Keyboard
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: SimulationFramework.Keyboard.IsKeyDown(SimulationFramework.Key)
  commentId: M:SimulationFramework.Keyboard.IsKeyDown(SimulationFramework.Key)
  id: IsKeyDown(SimulationFramework.Key)
  parent: SimulationFramework.Keyboard
  langs:
  - csharp
  - vb
  name: IsKeyDown(Key)
  nameWithType: Keyboard.IsKeyDown(Key)
  fullName: SimulationFramework.Keyboard.IsKeyDown(SimulationFramework.Key)
  type: Method
  source:
    remote:
      path: src/SimulationFramework/Keyboard.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: IsKeyDown
    path: src/SimulationFramework/Keyboard.cs
    startLine: 23
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  summary: Returns true if the provided key is pressed.
  example: []
  syntax:
    content: public static bool IsKeyDown(Key key)
    parameters:
    - id: key
      type: SimulationFramework.Key
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsKeyDown(key As Key) As Boolean
  overload: SimulationFramework.Keyboard.IsKeyDown*
- uid: SimulationFramework.Keyboard.IsKeyPressed(SimulationFramework.Key)
  commentId: M:SimulationFramework.Keyboard.IsKeyPressed(SimulationFramework.Key)
  id: IsKeyPressed(SimulationFramework.Key)
  parent: SimulationFramework.Keyboard
  langs:
  - csharp
  - vb
  name: IsKeyPressed(Key)
  nameWithType: Keyboard.IsKeyPressed(Key)
  fullName: SimulationFramework.Keyboard.IsKeyPressed(SimulationFramework.Key)
  type: Method
  source:
    remote:
      path: src/SimulationFramework/Keyboard.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: IsKeyPressed
    path: src/SimulationFramework/Keyboard.cs
    startLine: 28
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  summary: Returns true if the provided key is pressed this frame and was not pressed the frame before.
  example: []
  syntax:
    content: public static bool IsKeyPressed(Key key)
    parameters:
    - id: key
      type: SimulationFramework.Key
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsKeyPressed(key As Key) As Boolean
  overload: SimulationFramework.Keyboard.IsKeyPressed*
- uid: SimulationFramework.Keyboard.IsKeyReleased(SimulationFramework.Key)
  commentId: M:SimulationFramework.Keyboard.IsKeyReleased(SimulationFramework.Key)
  id: IsKeyReleased(SimulationFramework.Key)
  parent: SimulationFramework.Keyboard
  langs:
  - csharp
  - vb
  name: IsKeyReleased(Key)
  nameWithType: Keyboard.IsKeyReleased(Key)
  fullName: SimulationFramework.Keyboard.IsKeyReleased(SimulationFramework.Key)
  type: Method
  source:
    remote:
      path: src/SimulationFramework/Keyboard.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: IsKeyReleased
    path: src/SimulationFramework/Keyboard.cs
    startLine: 32
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  summary: Returns true if the provided key is not pressed this frame and was pressed the frame before.
  example: []
  syntax:
    content: public static bool IsKeyReleased(Key key)
    parameters:
    - id: key
      type: SimulationFramework.Key
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsKeyReleased(key As Key) As Boolean
  overload: SimulationFramework.Keyboard.IsKeyReleased*
- uid: SimulationFramework.Keyboard.GetChars
  commentId: M:SimulationFramework.Keyboard.GetChars
  id: GetChars
  parent: SimulationFramework.Keyboard
  langs:
  - csharp
  - vb
  name: GetChars()
  nameWithType: Keyboard.GetChars()
  fullName: SimulationFramework.Keyboard.GetChars()
  type: Method
  source:
    remote:
      path: src/SimulationFramework/Keyboard.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: GetChars
    path: src/SimulationFramework/Keyboard.cs
    startLine: 37
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  summary: Gets the keys typed this frame.
  example: []
  syntax:
    content: public static IEnumerable<char> GetChars()
    return:
      type: System.Collections.Generic.IEnumerable{System.Char}
    content.vb: Public Shared Function GetChars() As IEnumerable(Of Char)
  overload: SimulationFramework.Keyboard.GetChars*
- uid: SimulationFramework.Keyboard.KeyPressed
  commentId: E:SimulationFramework.Keyboard.KeyPressed
  id: KeyPressed
  parent: SimulationFramework.Keyboard
  langs:
  - csharp
  - vb
  name: KeyPressed
  nameWithType: Keyboard.KeyPressed
  fullName: SimulationFramework.Keyboard.KeyPressed
  type: Event
  source:
    remote:
      path: src/SimulationFramework/Keyboard.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: KeyPressed
    path: src/SimulationFramework/Keyboard.cs
    startLine: 42
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  summary: Invoked when a key is pressed on the keyboard.
  example: []
  syntax:
    content: public static event KeyEvent KeyPressed
    return:
      type: SimulationFramework.KeyEvent
    content.vb: Public Shared Event KeyPressed As KeyEvent
- uid: SimulationFramework.Keyboard.KeyReleased
  commentId: E:SimulationFramework.Keyboard.KeyReleased
  id: KeyReleased
  parent: SimulationFramework.Keyboard
  langs:
  - csharp
  - vb
  name: KeyReleased
  nameWithType: Keyboard.KeyReleased
  fullName: SimulationFramework.Keyboard.KeyReleased
  type: Event
  source:
    remote:
      path: src/SimulationFramework/Keyboard.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: KeyReleased
    path: src/SimulationFramework/Keyboard.cs
    startLine: 51
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  summary: Invoked when a key is released on the keyboard.
  example: []
  syntax:
    content: public static event KeyEvent KeyReleased
    return:
      type: SimulationFramework.KeyEvent
    content.vb: Public Shared Event KeyReleased As KeyEvent
- uid: SimulationFramework.Keyboard.IsAnyKeyDown
  commentId: M:SimulationFramework.Keyboard.IsAnyKeyDown
  id: IsAnyKeyDown
  parent: SimulationFramework.Keyboard
  langs:
  - csharp
  - vb
  name: IsAnyKeyDown()
  nameWithType: Keyboard.IsAnyKeyDown()
  fullName: SimulationFramework.Keyboard.IsAnyKeyDown()
  type: Method
  source:
    remote:
      path: src/SimulationFramework/Keyboard.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: IsAnyKeyDown
    path: src/SimulationFramework/Keyboard.cs
    startLine: 57
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  syntax:
    content: public static bool IsAnyKeyDown()
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsAnyKeyDown() As Boolean
  overload: SimulationFramework.Keyboard.IsAnyKeyDown*
- uid: SimulationFramework.Keyboard.IsAnyKeyDown(SimulationFramework.Key[])
  commentId: M:SimulationFramework.Keyboard.IsAnyKeyDown(SimulationFramework.Key[])
  id: IsAnyKeyDown(SimulationFramework.Key[])
  parent: SimulationFramework.Keyboard
  langs:
  - csharp
  - vb
  name: IsAnyKeyDown(params Key[])
  nameWithType: Keyboard.IsAnyKeyDown(params Key[])
  fullName: SimulationFramework.Keyboard.IsAnyKeyDown(params SimulationFramework.Key[])
  type: Method
  source:
    remote:
      path: src/SimulationFramework/Keyboard.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: IsAnyKeyDown
    path: src/SimulationFramework/Keyboard.cs
    startLine: 62
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  syntax:
    content: public static bool IsAnyKeyDown(params Key[] keys)
    parameters:
    - id: keys
      type: SimulationFramework.Key[]
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsAnyKeyDown(ParamArray keys As Key()) As Boolean
  overload: SimulationFramework.Keyboard.IsAnyKeyDown*
  nameWithType.vb: Keyboard.IsAnyKeyDown(ParamArray Key())
  fullName.vb: SimulationFramework.Keyboard.IsAnyKeyDown(ParamArray SimulationFramework.Key())
  name.vb: IsAnyKeyDown(ParamArray Key())
- uid: SimulationFramework.Keyboard.IsAnyKeyDown(System.ReadOnlySpan{SimulationFramework.Key})
  commentId: M:SimulationFramework.Keyboard.IsAnyKeyDown(System.ReadOnlySpan{SimulationFramework.Key})
  id: IsAnyKeyDown(System.ReadOnlySpan{SimulationFramework.Key})
  parent: SimulationFramework.Keyboard
  langs:
  - csharp
  - vb
  name: IsAnyKeyDown(ReadOnlySpan<Key>)
  nameWithType: Keyboard.IsAnyKeyDown(ReadOnlySpan<Key>)
  fullName: SimulationFramework.Keyboard.IsAnyKeyDown(System.ReadOnlySpan<SimulationFramework.Key>)
  type: Method
  source:
    remote:
      path: src/SimulationFramework/Keyboard.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: IsAnyKeyDown
    path: src/SimulationFramework/Keyboard.cs
    startLine: 67
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  syntax:
    content: public static bool IsAnyKeyDown(ReadOnlySpan<Key> keys)
    parameters:
    - id: keys
      type: System.ReadOnlySpan{SimulationFramework.Key}
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsAnyKeyDown(keys As ReadOnlySpan(Of Key)) As Boolean
  overload: SimulationFramework.Keyboard.IsAnyKeyDown*
  nameWithType.vb: Keyboard.IsAnyKeyDown(ReadOnlySpan(Of Key))
  fullName.vb: SimulationFramework.Keyboard.IsAnyKeyDown(System.ReadOnlySpan(Of SimulationFramework.Key))
  name.vb: IsAnyKeyDown(ReadOnlySpan(Of Key))
- uid: SimulationFramework.Keyboard.IsAnyKeyPressed
  commentId: M:SimulationFramework.Keyboard.IsAnyKeyPressed
  id: IsAnyKeyPressed
  parent: SimulationFramework.Keyboard
  langs:
  - csharp
  - vb
  name: IsAnyKeyPressed()
  nameWithType: Keyboard.IsAnyKeyPressed()
  fullName: SimulationFramework.Keyboard.IsAnyKeyPressed()
  type: Method
  source:
    remote:
      path: src/SimulationFramework/Keyboard.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: IsAnyKeyPressed
    path: src/SimulationFramework/Keyboard.cs
    startLine: 78
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  syntax:
    content: public static bool IsAnyKeyPressed()
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsAnyKeyPressed() As Boolean
  overload: SimulationFramework.Keyboard.IsAnyKeyPressed*
- uid: SimulationFramework.Keyboard.IsAnyKeyPressed(SimulationFramework.Key[])
  commentId: M:SimulationFramework.Keyboard.IsAnyKeyPressed(SimulationFramework.Key[])
  id: IsAnyKeyPressed(SimulationFramework.Key[])
  parent: SimulationFramework.Keyboard
  langs:
  - csharp
  - vb
  name: IsAnyKeyPressed(params Key[])
  nameWithType: Keyboard.IsAnyKeyPressed(params Key[])
  fullName: SimulationFramework.Keyboard.IsAnyKeyPressed(params SimulationFramework.Key[])
  type: Method
  source:
    remote:
      path: src/SimulationFramework/Keyboard.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: IsAnyKeyPressed
    path: src/SimulationFramework/Keyboard.cs
    startLine: 83
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  syntax:
    content: public static bool IsAnyKeyPressed(params Key[] keys)
    parameters:
    - id: keys
      type: SimulationFramework.Key[]
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsAnyKeyPressed(ParamArray keys As Key()) As Boolean
  overload: SimulationFramework.Keyboard.IsAnyKeyPressed*
  nameWithType.vb: Keyboard.IsAnyKeyPressed(ParamArray Key())
  fullName.vb: SimulationFramework.Keyboard.IsAnyKeyPressed(ParamArray SimulationFramework.Key())
  name.vb: IsAnyKeyPressed(ParamArray Key())
- uid: SimulationFramework.Keyboard.IsAnyKeyPressed(System.ReadOnlySpan{SimulationFramework.Key})
  commentId: M:SimulationFramework.Keyboard.IsAnyKeyPressed(System.ReadOnlySpan{SimulationFramework.Key})
  id: IsAnyKeyPressed(System.ReadOnlySpan{SimulationFramework.Key})
  parent: SimulationFramework.Keyboard
  langs:
  - csharp
  - vb
  name: IsAnyKeyPressed(ReadOnlySpan<Key>)
  nameWithType: Keyboard.IsAnyKeyPressed(ReadOnlySpan<Key>)
  fullName: SimulationFramework.Keyboard.IsAnyKeyPressed(System.ReadOnlySpan<SimulationFramework.Key>)
  type: Method
  source:
    remote:
      path: src/SimulationFramework/Keyboard.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: IsAnyKeyPressed
    path: src/SimulationFramework/Keyboard.cs
    startLine: 88
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  syntax:
    content: public static bool IsAnyKeyPressed(ReadOnlySpan<Key> keys)
    parameters:
    - id: keys
      type: System.ReadOnlySpan{SimulationFramework.Key}
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsAnyKeyPressed(keys As ReadOnlySpan(Of Key)) As Boolean
  overload: SimulationFramework.Keyboard.IsAnyKeyPressed*
  nameWithType.vb: Keyboard.IsAnyKeyPressed(ReadOnlySpan(Of Key))
  fullName.vb: SimulationFramework.Keyboard.IsAnyKeyPressed(System.ReadOnlySpan(Of SimulationFramework.Key))
  name.vb: IsAnyKeyPressed(ReadOnlySpan(Of Key))
- uid: SimulationFramework.Keyboard.IsAnyKeyReleased
  commentId: M:SimulationFramework.Keyboard.IsAnyKeyReleased
  id: IsAnyKeyReleased
  parent: SimulationFramework.Keyboard
  langs:
  - csharp
  - vb
  name: IsAnyKeyReleased()
  nameWithType: Keyboard.IsAnyKeyReleased()
  fullName: SimulationFramework.Keyboard.IsAnyKeyReleased()
  type: Method
  source:
    remote:
      path: src/SimulationFramework/Keyboard.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: IsAnyKeyReleased
    path: src/SimulationFramework/Keyboard.cs
    startLine: 99
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  syntax:
    content: public static bool IsAnyKeyReleased()
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsAnyKeyReleased() As Boolean
  overload: SimulationFramework.Keyboard.IsAnyKeyReleased*
- uid: SimulationFramework.Keyboard.IsAnyKeyReleased(SimulationFramework.Key[])
  commentId: M:SimulationFramework.Keyboard.IsAnyKeyReleased(SimulationFramework.Key[])
  id: IsAnyKeyReleased(SimulationFramework.Key[])
  parent: SimulationFramework.Keyboard
  langs:
  - csharp
  - vb
  name: IsAnyKeyReleased(params Key[])
  nameWithType: Keyboard.IsAnyKeyReleased(params Key[])
  fullName: SimulationFramework.Keyboard.IsAnyKeyReleased(params SimulationFramework.Key[])
  type: Method
  source:
    remote:
      path: src/SimulationFramework/Keyboard.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: IsAnyKeyReleased
    path: src/SimulationFramework/Keyboard.cs
    startLine: 104
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  syntax:
    content: public static bool IsAnyKeyReleased(params Key[] keys)
    parameters:
    - id: keys
      type: SimulationFramework.Key[]
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsAnyKeyReleased(ParamArray keys As Key()) As Boolean
  overload: SimulationFramework.Keyboard.IsAnyKeyReleased*
  nameWithType.vb: Keyboard.IsAnyKeyReleased(ParamArray Key())
  fullName.vb: SimulationFramework.Keyboard.IsAnyKeyReleased(ParamArray SimulationFramework.Key())
  name.vb: IsAnyKeyReleased(ParamArray Key())
- uid: SimulationFramework.Keyboard.IsAnyKeyReleased(System.ReadOnlySpan{SimulationFramework.Key})
  commentId: M:SimulationFramework.Keyboard.IsAnyKeyReleased(System.ReadOnlySpan{SimulationFramework.Key})
  id: IsAnyKeyReleased(System.ReadOnlySpan{SimulationFramework.Key})
  parent: SimulationFramework.Keyboard
  langs:
  - csharp
  - vb
  name: IsAnyKeyReleased(ReadOnlySpan<Key>)
  nameWithType: Keyboard.IsAnyKeyReleased(ReadOnlySpan<Key>)
  fullName: SimulationFramework.Keyboard.IsAnyKeyReleased(System.ReadOnlySpan<SimulationFramework.Key>)
  type: Method
  source:
    remote:
      path: src/SimulationFramework/Keyboard.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: IsAnyKeyReleased
    path: src/SimulationFramework/Keyboard.cs
    startLine: 109
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  syntax:
    content: public static bool IsAnyKeyReleased(ReadOnlySpan<Key> keys)
    parameters:
    - id: keys
      type: System.ReadOnlySpan{SimulationFramework.Key}
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsAnyKeyReleased(keys As ReadOnlySpan(Of Key)) As Boolean
  overload: SimulationFramework.Keyboard.IsAnyKeyReleased*
  nameWithType.vb: Keyboard.IsAnyKeyReleased(ReadOnlySpan(Of Key))
  fullName.vb: SimulationFramework.Keyboard.IsAnyKeyReleased(System.ReadOnlySpan(Of SimulationFramework.Key))
  name.vb: IsAnyKeyReleased(ReadOnlySpan(Of Key))
references:
- uid: SimulationFramework
  commentId: N:SimulationFramework
  href: SimulationFramework.html
  name: SimulationFramework
  nameWithType: SimulationFramework
  fullName: SimulationFramework
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: SimulationFramework.Keyboard.IsKeyDown*
  commentId: Overload:SimulationFramework.Keyboard.IsKeyDown
  href: SimulationFramework.Keyboard.html#SimulationFramework.Keyboard.IsKeyDown(SimulationFramework.Key)
  name: IsKeyDown
  nameWithType: Keyboard.IsKeyDown
  fullName: SimulationFramework.Keyboard.IsKeyDown
- uid: SimulationFramework.Key
  commentId: T:SimulationFramework.Key
  parent: SimulationFramework
  href: SimulationFramework.Key.html
  name: Key
  nameWithType: Key
  fullName: SimulationFramework.Key
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: SimulationFramework.Keyboard.IsKeyPressed*
  commentId: Overload:SimulationFramework.Keyboard.IsKeyPressed
  href: SimulationFramework.Keyboard.html#SimulationFramework.Keyboard.IsKeyPressed(SimulationFramework.Key)
  name: IsKeyPressed
  nameWithType: Keyboard.IsKeyPressed
  fullName: SimulationFramework.Keyboard.IsKeyPressed
- uid: SimulationFramework.Keyboard.IsKeyReleased*
  commentId: Overload:SimulationFramework.Keyboard.IsKeyReleased
  href: SimulationFramework.Keyboard.html#SimulationFramework.Keyboard.IsKeyReleased(SimulationFramework.Key)
  name: IsKeyReleased
  nameWithType: Keyboard.IsKeyReleased
  fullName: SimulationFramework.Keyboard.IsKeyReleased
- uid: SimulationFramework.Keyboard.GetChars*
  commentId: Overload:SimulationFramework.Keyboard.GetChars
  href: SimulationFramework.Keyboard.html#SimulationFramework.Keyboard.GetChars
  name: GetChars
  nameWithType: Keyboard.GetChars
  fullName: SimulationFramework.Keyboard.GetChars
- uid: System.Collections.Generic.IEnumerable{System.Char}
  commentId: T:System.Collections.Generic.IEnumerable{System.Char}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<char>
  nameWithType: IEnumerable<char>
  fullName: System.Collections.Generic.IEnumerable<char>
  nameWithType.vb: IEnumerable(Of Char)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Char)
  name.vb: IEnumerable(Of Char)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Char
    name: char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Char
    name: Char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: SimulationFramework.KeyEvent
  commentId: T:SimulationFramework.KeyEvent
  parent: SimulationFramework
  href: SimulationFramework.KeyEvent.html
  name: KeyEvent
  nameWithType: KeyEvent
  fullName: SimulationFramework.KeyEvent
- uid: SimulationFramework.Keyboard.IsAnyKeyDown*
  commentId: Overload:SimulationFramework.Keyboard.IsAnyKeyDown
  href: SimulationFramework.Keyboard.html#SimulationFramework.Keyboard.IsAnyKeyDown
  name: IsAnyKeyDown
  nameWithType: Keyboard.IsAnyKeyDown
  fullName: SimulationFramework.Keyboard.IsAnyKeyDown
- uid: SimulationFramework.Key[]
  isExternal: true
  href: SimulationFramework.Key.html
  name: Key[]
  nameWithType: Key[]
  fullName: SimulationFramework.Key[]
  nameWithType.vb: Key()
  fullName.vb: SimulationFramework.Key()
  name.vb: Key()
  spec.csharp:
  - uid: SimulationFramework.Key
    name: Key
    href: SimulationFramework.Key.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: SimulationFramework.Key
    name: Key
    href: SimulationFramework.Key.html
  - name: (
  - name: )
- uid: System.ReadOnlySpan{SimulationFramework.Key}
  commentId: T:System.ReadOnlySpan{SimulationFramework.Key}
  parent: System
  definition: System.ReadOnlySpan`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<Key>
  nameWithType: ReadOnlySpan<Key>
  fullName: System.ReadOnlySpan<SimulationFramework.Key>
  nameWithType.vb: ReadOnlySpan(Of Key)
  fullName.vb: System.ReadOnlySpan(Of SimulationFramework.Key)
  name.vb: ReadOnlySpan(Of Key)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - uid: SimulationFramework.Key
    name: Key
    href: SimulationFramework.Key.html
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - uid: SimulationFramework.Key
    name: Key
    href: SimulationFramework.Key.html
  - name: )
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: SimulationFramework.Keyboard.IsAnyKeyPressed*
  commentId: Overload:SimulationFramework.Keyboard.IsAnyKeyPressed
  href: SimulationFramework.Keyboard.html#SimulationFramework.Keyboard.IsAnyKeyPressed
  name: IsAnyKeyPressed
  nameWithType: Keyboard.IsAnyKeyPressed
  fullName: SimulationFramework.Keyboard.IsAnyKeyPressed
- uid: SimulationFramework.Keyboard.IsAnyKeyReleased*
  commentId: Overload:SimulationFramework.Keyboard.IsAnyKeyReleased
  href: SimulationFramework.Keyboard.html#SimulationFramework.Keyboard.IsAnyKeyReleased
  name: IsAnyKeyReleased
  nameWithType: Keyboard.IsAnyKeyReleased
  fullName: SimulationFramework.Keyboard.IsAnyKeyReleased
