### YamlMime:ManagedReference
items:
- uid: SimulationFramework.Mouse
  commentId: T:SimulationFramework.Mouse
  id: Mouse
  parent: SimulationFramework
  children:
  - SimulationFramework.Mouse.DeltaPosition
  - SimulationFramework.Mouse.IsAnyButtonDown
  - SimulationFramework.Mouse.IsAnyButtonDown(SimulationFramework.MouseButton[])
  - SimulationFramework.Mouse.IsAnyButtonDown(System.ReadOnlySpan{SimulationFramework.MouseButton})
  - SimulationFramework.Mouse.IsAnyButtonPressed
  - SimulationFramework.Mouse.IsAnyButtonPressed(SimulationFramework.MouseButton[])
  - SimulationFramework.Mouse.IsAnyButtonPressed(System.ReadOnlySpan{SimulationFramework.MouseButton})
  - SimulationFramework.Mouse.IsAnyButtonReleased
  - SimulationFramework.Mouse.IsAnyButtonReleased(SimulationFramework.MouseButton[])
  - SimulationFramework.Mouse.IsAnyButtonReleased(System.ReadOnlySpan{SimulationFramework.MouseButton})
  - SimulationFramework.Mouse.IsButtonDown(SimulationFramework.MouseButton)
  - SimulationFramework.Mouse.IsButtonPressed(SimulationFramework.MouseButton)
  - SimulationFramework.Mouse.IsButtonReleased(SimulationFramework.MouseButton)
  - SimulationFramework.Mouse.Position
  - SimulationFramework.Mouse.ScrollWheelDelta
  langs:
  - csharp
  - vb
  name: Mouse
  nameWithType: Mouse
  fullName: SimulationFramework.Mouse
  type: Class
  source:
    remote:
      path: src/SimulationFramework/Mouse.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: Mouse
    path: src/SimulationFramework/Mouse.cs
    startLine: 12
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  summary: Provides mouse input to the application.
  example: []
  syntax:
    content: public static class Mouse
    content.vb: Public Module Mouse
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: SimulationFramework.Mouse.Position
  commentId: P:SimulationFramework.Mouse.Position
  id: Position
  parent: SimulationFramework.Mouse
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: Mouse.Position
  fullName: SimulationFramework.Mouse.Position
  type: Property
  source:
    remote:
      path: src/SimulationFramework/Mouse.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: Position
    path: src/SimulationFramework/Mouse.cs
    startLine: 19
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  summary: The position of the mouse.
  example: []
  syntax:
    content: public static Vector2 Position { get; }
    parameters: []
    return:
      type: System.Numerics.Vector2
    content.vb: Public Shared ReadOnly Property Position As Vector2
  overload: SimulationFramework.Mouse.Position*
- uid: SimulationFramework.Mouse.DeltaPosition
  commentId: P:SimulationFramework.Mouse.DeltaPosition
  id: DeltaPosition
  parent: SimulationFramework.Mouse
  langs:
  - csharp
  - vb
  name: DeltaPosition
  nameWithType: Mouse.DeltaPosition
  fullName: SimulationFramework.Mouse.DeltaPosition
  type: Property
  source:
    remote:
      path: src/SimulationFramework/Mouse.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: DeltaPosition
    path: src/SimulationFramework/Mouse.cs
    startLine: 23
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  summary: The distance the mouse has moved since the last frame.
  example: []
  syntax:
    content: public static Vector2 DeltaPosition { get; }
    parameters: []
    return:
      type: System.Numerics.Vector2
    content.vb: Public Shared ReadOnly Property DeltaPosition As Vector2
  overload: SimulationFramework.Mouse.DeltaPosition*
- uid: SimulationFramework.Mouse.ScrollWheelDelta
  commentId: P:SimulationFramework.Mouse.ScrollWheelDelta
  id: ScrollWheelDelta
  parent: SimulationFramework.Mouse
  langs:
  - csharp
  - vb
  name: ScrollWheelDelta
  nameWithType: Mouse.ScrollWheelDelta
  fullName: SimulationFramework.Mouse.ScrollWheelDelta
  type: Property
  source:
    remote:
      path: src/SimulationFramework/Mouse.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: ScrollWheelDelta
    path: src/SimulationFramework/Mouse.cs
    startLine: 27
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  summary: The distance the scroll whell has moved since the last frame.
  example: []
  syntax:
    content: public static int ScrollWheelDelta { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property ScrollWheelDelta As Integer
  overload: SimulationFramework.Mouse.ScrollWheelDelta*
- uid: SimulationFramework.Mouse.IsButtonDown(SimulationFramework.MouseButton)
  commentId: M:SimulationFramework.Mouse.IsButtonDown(SimulationFramework.MouseButton)
  id: IsButtonDown(SimulationFramework.MouseButton)
  parent: SimulationFramework.Mouse
  langs:
  - csharp
  - vb
  name: IsButtonDown(MouseButton)
  nameWithType: Mouse.IsButtonDown(MouseButton)
  fullName: SimulationFramework.Mouse.IsButtonDown(SimulationFramework.MouseButton)
  type: Method
  source:
    remote:
      path: src/SimulationFramework/Mouse.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: IsButtonDown
    path: src/SimulationFramework/Mouse.cs
    startLine: 32
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  summary: Returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the provided button is down, otherwise <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
  example: []
  syntax:
    content: public static bool IsButtonDown(MouseButton button)
    parameters:
    - id: button
      type: SimulationFramework.MouseButton
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsButtonDown(button As MouseButton) As Boolean
  overload: SimulationFramework.Mouse.IsButtonDown*
- uid: SimulationFramework.Mouse.IsButtonPressed(SimulationFramework.MouseButton)
  commentId: M:SimulationFramework.Mouse.IsButtonPressed(SimulationFramework.MouseButton)
  id: IsButtonPressed(SimulationFramework.MouseButton)
  parent: SimulationFramework.Mouse
  langs:
  - csharp
  - vb
  name: IsButtonPressed(MouseButton)
  nameWithType: Mouse.IsButtonPressed(MouseButton)
  fullName: SimulationFramework.Mouse.IsButtonPressed(SimulationFramework.MouseButton)
  type: Method
  source:
    remote:
      path: src/SimulationFramework/Mouse.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: IsButtonPressed
    path: src/SimulationFramework/Mouse.cs
    startLine: 37
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  summary: Returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the provided button was just pressed this frame, otherwise <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
  example: []
  syntax:
    content: public static bool IsButtonPressed(MouseButton button)
    parameters:
    - id: button
      type: SimulationFramework.MouseButton
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsButtonPressed(button As MouseButton) As Boolean
  overload: SimulationFramework.Mouse.IsButtonPressed*
- uid: SimulationFramework.Mouse.IsButtonReleased(SimulationFramework.MouseButton)
  commentId: M:SimulationFramework.Mouse.IsButtonReleased(SimulationFramework.MouseButton)
  id: IsButtonReleased(SimulationFramework.MouseButton)
  parent: SimulationFramework.Mouse
  langs:
  - csharp
  - vb
  name: IsButtonReleased(MouseButton)
  nameWithType: Mouse.IsButtonReleased(MouseButton)
  fullName: SimulationFramework.Mouse.IsButtonReleased(SimulationFramework.MouseButton)
  type: Method
  source:
    remote:
      path: src/SimulationFramework/Mouse.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: IsButtonReleased
    path: src/SimulationFramework/Mouse.cs
    startLine: 42
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  summary: Returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the provided button was just released this frame, otherwise <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
  example: []
  syntax:
    content: public static bool IsButtonReleased(MouseButton button)
    parameters:
    - id: button
      type: SimulationFramework.MouseButton
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsButtonReleased(button As MouseButton) As Boolean
  overload: SimulationFramework.Mouse.IsButtonReleased*
- uid: SimulationFramework.Mouse.IsAnyButtonDown
  commentId: M:SimulationFramework.Mouse.IsAnyButtonDown
  id: IsAnyButtonDown
  parent: SimulationFramework.Mouse
  langs:
  - csharp
  - vb
  name: IsAnyButtonDown()
  nameWithType: Mouse.IsAnyButtonDown()
  fullName: SimulationFramework.Mouse.IsAnyButtonDown()
  type: Method
  source:
    remote:
      path: src/SimulationFramework/Mouse.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: IsAnyButtonDown
    path: src/SimulationFramework/Mouse.cs
    startLine: 44
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  syntax:
    content: public static bool IsAnyButtonDown()
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsAnyButtonDown() As Boolean
  overload: SimulationFramework.Mouse.IsAnyButtonDown*
- uid: SimulationFramework.Mouse.IsAnyButtonDown(SimulationFramework.MouseButton[])
  commentId: M:SimulationFramework.Mouse.IsAnyButtonDown(SimulationFramework.MouseButton[])
  id: IsAnyButtonDown(SimulationFramework.MouseButton[])
  parent: SimulationFramework.Mouse
  langs:
  - csharp
  - vb
  name: IsAnyButtonDown(params MouseButton[])
  nameWithType: Mouse.IsAnyButtonDown(params MouseButton[])
  fullName: SimulationFramework.Mouse.IsAnyButtonDown(params SimulationFramework.MouseButton[])
  type: Method
  source:
    remote:
      path: src/SimulationFramework/Mouse.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: IsAnyButtonDown
    path: src/SimulationFramework/Mouse.cs
    startLine: 45
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  syntax:
    content: public static bool IsAnyButtonDown(params MouseButton[] mouseButtons)
    parameters:
    - id: mouseButtons
      type: SimulationFramework.MouseButton[]
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsAnyButtonDown(ParamArray mouseButtons As MouseButton()) As Boolean
  overload: SimulationFramework.Mouse.IsAnyButtonDown*
  nameWithType.vb: Mouse.IsAnyButtonDown(ParamArray MouseButton())
  fullName.vb: SimulationFramework.Mouse.IsAnyButtonDown(ParamArray SimulationFramework.MouseButton())
  name.vb: IsAnyButtonDown(ParamArray MouseButton())
- uid: SimulationFramework.Mouse.IsAnyButtonDown(System.ReadOnlySpan{SimulationFramework.MouseButton})
  commentId: M:SimulationFramework.Mouse.IsAnyButtonDown(System.ReadOnlySpan{SimulationFramework.MouseButton})
  id: IsAnyButtonDown(System.ReadOnlySpan{SimulationFramework.MouseButton})
  parent: SimulationFramework.Mouse
  langs:
  - csharp
  - vb
  name: IsAnyButtonDown(ReadOnlySpan<MouseButton>)
  nameWithType: Mouse.IsAnyButtonDown(ReadOnlySpan<MouseButton>)
  fullName: SimulationFramework.Mouse.IsAnyButtonDown(System.ReadOnlySpan<SimulationFramework.MouseButton>)
  type: Method
  source:
    remote:
      path: src/SimulationFramework/Mouse.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: IsAnyButtonDown
    path: src/SimulationFramework/Mouse.cs
    startLine: 47
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  syntax:
    content: public static bool IsAnyButtonDown(ReadOnlySpan<MouseButton> buttons)
    parameters:
    - id: buttons
      type: System.ReadOnlySpan{SimulationFramework.MouseButton}
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsAnyButtonDown(buttons As ReadOnlySpan(Of MouseButton)) As Boolean
  overload: SimulationFramework.Mouse.IsAnyButtonDown*
  nameWithType.vb: Mouse.IsAnyButtonDown(ReadOnlySpan(Of MouseButton))
  fullName.vb: SimulationFramework.Mouse.IsAnyButtonDown(System.ReadOnlySpan(Of SimulationFramework.MouseButton))
  name.vb: IsAnyButtonDown(ReadOnlySpan(Of MouseButton))
- uid: SimulationFramework.Mouse.IsAnyButtonReleased
  commentId: M:SimulationFramework.Mouse.IsAnyButtonReleased
  id: IsAnyButtonReleased
  parent: SimulationFramework.Mouse
  langs:
  - csharp
  - vb
  name: IsAnyButtonReleased()
  nameWithType: Mouse.IsAnyButtonReleased()
  fullName: SimulationFramework.Mouse.IsAnyButtonReleased()
  type: Method
  source:
    remote:
      path: src/SimulationFramework/Mouse.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: IsAnyButtonReleased
    path: src/SimulationFramework/Mouse.cs
    startLine: 58
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  syntax:
    content: public static bool IsAnyButtonReleased()
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsAnyButtonReleased() As Boolean
  overload: SimulationFramework.Mouse.IsAnyButtonReleased*
- uid: SimulationFramework.Mouse.IsAnyButtonReleased(SimulationFramework.MouseButton[])
  commentId: M:SimulationFramework.Mouse.IsAnyButtonReleased(SimulationFramework.MouseButton[])
  id: IsAnyButtonReleased(SimulationFramework.MouseButton[])
  parent: SimulationFramework.Mouse
  langs:
  - csharp
  - vb
  name: IsAnyButtonReleased(params MouseButton[])
  nameWithType: Mouse.IsAnyButtonReleased(params MouseButton[])
  fullName: SimulationFramework.Mouse.IsAnyButtonReleased(params SimulationFramework.MouseButton[])
  type: Method
  source:
    remote:
      path: src/SimulationFramework/Mouse.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: IsAnyButtonReleased
    path: src/SimulationFramework/Mouse.cs
    startLine: 59
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  syntax:
    content: public static bool IsAnyButtonReleased(params MouseButton[] mouseButtons)
    parameters:
    - id: mouseButtons
      type: SimulationFramework.MouseButton[]
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsAnyButtonReleased(ParamArray mouseButtons As MouseButton()) As Boolean
  overload: SimulationFramework.Mouse.IsAnyButtonReleased*
  nameWithType.vb: Mouse.IsAnyButtonReleased(ParamArray MouseButton())
  fullName.vb: SimulationFramework.Mouse.IsAnyButtonReleased(ParamArray SimulationFramework.MouseButton())
  name.vb: IsAnyButtonReleased(ParamArray MouseButton())
- uid: SimulationFramework.Mouse.IsAnyButtonReleased(System.ReadOnlySpan{SimulationFramework.MouseButton})
  commentId: M:SimulationFramework.Mouse.IsAnyButtonReleased(System.ReadOnlySpan{SimulationFramework.MouseButton})
  id: IsAnyButtonReleased(System.ReadOnlySpan{SimulationFramework.MouseButton})
  parent: SimulationFramework.Mouse
  langs:
  - csharp
  - vb
  name: IsAnyButtonReleased(ReadOnlySpan<MouseButton>)
  nameWithType: Mouse.IsAnyButtonReleased(ReadOnlySpan<MouseButton>)
  fullName: SimulationFramework.Mouse.IsAnyButtonReleased(System.ReadOnlySpan<SimulationFramework.MouseButton>)
  type: Method
  source:
    remote:
      path: src/SimulationFramework/Mouse.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: IsAnyButtonReleased
    path: src/SimulationFramework/Mouse.cs
    startLine: 61
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  syntax:
    content: public static bool IsAnyButtonReleased(ReadOnlySpan<MouseButton> buttons)
    parameters:
    - id: buttons
      type: System.ReadOnlySpan{SimulationFramework.MouseButton}
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsAnyButtonReleased(buttons As ReadOnlySpan(Of MouseButton)) As Boolean
  overload: SimulationFramework.Mouse.IsAnyButtonReleased*
  nameWithType.vb: Mouse.IsAnyButtonReleased(ReadOnlySpan(Of MouseButton))
  fullName.vb: SimulationFramework.Mouse.IsAnyButtonReleased(System.ReadOnlySpan(Of SimulationFramework.MouseButton))
  name.vb: IsAnyButtonReleased(ReadOnlySpan(Of MouseButton))
- uid: SimulationFramework.Mouse.IsAnyButtonPressed
  commentId: M:SimulationFramework.Mouse.IsAnyButtonPressed
  id: IsAnyButtonPressed
  parent: SimulationFramework.Mouse
  langs:
  - csharp
  - vb
  name: IsAnyButtonPressed()
  nameWithType: Mouse.IsAnyButtonPressed()
  fullName: SimulationFramework.Mouse.IsAnyButtonPressed()
  type: Method
  source:
    remote:
      path: src/SimulationFramework/Mouse.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: IsAnyButtonPressed
    path: src/SimulationFramework/Mouse.cs
    startLine: 72
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  syntax:
    content: public static bool IsAnyButtonPressed()
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsAnyButtonPressed() As Boolean
  overload: SimulationFramework.Mouse.IsAnyButtonPressed*
- uid: SimulationFramework.Mouse.IsAnyButtonPressed(SimulationFramework.MouseButton[])
  commentId: M:SimulationFramework.Mouse.IsAnyButtonPressed(SimulationFramework.MouseButton[])
  id: IsAnyButtonPressed(SimulationFramework.MouseButton[])
  parent: SimulationFramework.Mouse
  langs:
  - csharp
  - vb
  name: IsAnyButtonPressed(params MouseButton[])
  nameWithType: Mouse.IsAnyButtonPressed(params MouseButton[])
  fullName: SimulationFramework.Mouse.IsAnyButtonPressed(params SimulationFramework.MouseButton[])
  type: Method
  source:
    remote:
      path: src/SimulationFramework/Mouse.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: IsAnyButtonPressed
    path: src/SimulationFramework/Mouse.cs
    startLine: 74
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  syntax:
    content: public static bool IsAnyButtonPressed(params MouseButton[] mouseButtons)
    parameters:
    - id: mouseButtons
      type: SimulationFramework.MouseButton[]
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsAnyButtonPressed(ParamArray mouseButtons As MouseButton()) As Boolean
  overload: SimulationFramework.Mouse.IsAnyButtonPressed*
  nameWithType.vb: Mouse.IsAnyButtonPressed(ParamArray MouseButton())
  fullName.vb: SimulationFramework.Mouse.IsAnyButtonPressed(ParamArray SimulationFramework.MouseButton())
  name.vb: IsAnyButtonPressed(ParamArray MouseButton())
- uid: SimulationFramework.Mouse.IsAnyButtonPressed(System.ReadOnlySpan{SimulationFramework.MouseButton})
  commentId: M:SimulationFramework.Mouse.IsAnyButtonPressed(System.ReadOnlySpan{SimulationFramework.MouseButton})
  id: IsAnyButtonPressed(System.ReadOnlySpan{SimulationFramework.MouseButton})
  parent: SimulationFramework.Mouse
  langs:
  - csharp
  - vb
  name: IsAnyButtonPressed(ReadOnlySpan<MouseButton>)
  nameWithType: Mouse.IsAnyButtonPressed(ReadOnlySpan<MouseButton>)
  fullName: SimulationFramework.Mouse.IsAnyButtonPressed(System.ReadOnlySpan<SimulationFramework.MouseButton>)
  type: Method
  source:
    remote:
      path: src/SimulationFramework/Mouse.cs
      branch: master
      repo: https://github.com/Redninja106/simulationframework
    id: IsAnyButtonPressed
    path: src/SimulationFramework/Mouse.cs
    startLine: 76
  assemblies:
  - SimulationFramework
  namespace: SimulationFramework
  syntax:
    content: public static bool IsAnyButtonPressed(ReadOnlySpan<MouseButton> buttons)
    parameters:
    - id: buttons
      type: System.ReadOnlySpan{SimulationFramework.MouseButton}
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsAnyButtonPressed(buttons As ReadOnlySpan(Of MouseButton)) As Boolean
  overload: SimulationFramework.Mouse.IsAnyButtonPressed*
  nameWithType.vb: Mouse.IsAnyButtonPressed(ReadOnlySpan(Of MouseButton))
  fullName.vb: SimulationFramework.Mouse.IsAnyButtonPressed(System.ReadOnlySpan(Of SimulationFramework.MouseButton))
  name.vb: IsAnyButtonPressed(ReadOnlySpan(Of MouseButton))
references:
- uid: SimulationFramework
  commentId: N:SimulationFramework
  href: SimulationFramework.html
  name: SimulationFramework
  nameWithType: SimulationFramework
  fullName: SimulationFramework
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: SimulationFramework.Mouse.Position*
  commentId: Overload:SimulationFramework.Mouse.Position
  href: SimulationFramework.Mouse.html#SimulationFramework.Mouse.Position
  name: Position
  nameWithType: Mouse.Position
  fullName: SimulationFramework.Mouse.Position
- uid: System.Numerics.Vector2
  commentId: T:System.Numerics.Vector2
  parent: System.Numerics
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.vector2
  name: Vector2
  nameWithType: Vector2
  fullName: System.Numerics.Vector2
- uid: System.Numerics
  commentId: N:System.Numerics
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Numerics
  nameWithType: System.Numerics
  fullName: System.Numerics
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Numerics
    name: Numerics
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Numerics
    name: Numerics
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics
- uid: SimulationFramework.Mouse.DeltaPosition*
  commentId: Overload:SimulationFramework.Mouse.DeltaPosition
  href: SimulationFramework.Mouse.html#SimulationFramework.Mouse.DeltaPosition
  name: DeltaPosition
  nameWithType: Mouse.DeltaPosition
  fullName: SimulationFramework.Mouse.DeltaPosition
- uid: SimulationFramework.Mouse.ScrollWheelDelta*
  commentId: Overload:SimulationFramework.Mouse.ScrollWheelDelta
  href: SimulationFramework.Mouse.html#SimulationFramework.Mouse.ScrollWheelDelta
  name: ScrollWheelDelta
  nameWithType: Mouse.ScrollWheelDelta
  fullName: SimulationFramework.Mouse.ScrollWheelDelta
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: SimulationFramework.Mouse.IsButtonDown*
  commentId: Overload:SimulationFramework.Mouse.IsButtonDown
  href: SimulationFramework.Mouse.html#SimulationFramework.Mouse.IsButtonDown(SimulationFramework.MouseButton)
  name: IsButtonDown
  nameWithType: Mouse.IsButtonDown
  fullName: SimulationFramework.Mouse.IsButtonDown
- uid: SimulationFramework.MouseButton
  commentId: T:SimulationFramework.MouseButton
  parent: SimulationFramework
  href: SimulationFramework.MouseButton.html
  name: MouseButton
  nameWithType: MouseButton
  fullName: SimulationFramework.MouseButton
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: SimulationFramework.Mouse.IsButtonPressed*
  commentId: Overload:SimulationFramework.Mouse.IsButtonPressed
  href: SimulationFramework.Mouse.html#SimulationFramework.Mouse.IsButtonPressed(SimulationFramework.MouseButton)
  name: IsButtonPressed
  nameWithType: Mouse.IsButtonPressed
  fullName: SimulationFramework.Mouse.IsButtonPressed
- uid: SimulationFramework.Mouse.IsButtonReleased*
  commentId: Overload:SimulationFramework.Mouse.IsButtonReleased
  href: SimulationFramework.Mouse.html#SimulationFramework.Mouse.IsButtonReleased(SimulationFramework.MouseButton)
  name: IsButtonReleased
  nameWithType: Mouse.IsButtonReleased
  fullName: SimulationFramework.Mouse.IsButtonReleased
- uid: SimulationFramework.Mouse.IsAnyButtonDown*
  commentId: Overload:SimulationFramework.Mouse.IsAnyButtonDown
  href: SimulationFramework.Mouse.html#SimulationFramework.Mouse.IsAnyButtonDown
  name: IsAnyButtonDown
  nameWithType: Mouse.IsAnyButtonDown
  fullName: SimulationFramework.Mouse.IsAnyButtonDown
- uid: SimulationFramework.MouseButton[]
  isExternal: true
  href: SimulationFramework.MouseButton.html
  name: MouseButton[]
  nameWithType: MouseButton[]
  fullName: SimulationFramework.MouseButton[]
  nameWithType.vb: MouseButton()
  fullName.vb: SimulationFramework.MouseButton()
  name.vb: MouseButton()
  spec.csharp:
  - uid: SimulationFramework.MouseButton
    name: MouseButton
    href: SimulationFramework.MouseButton.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: SimulationFramework.MouseButton
    name: MouseButton
    href: SimulationFramework.MouseButton.html
  - name: (
  - name: )
- uid: System.ReadOnlySpan{SimulationFramework.MouseButton}
  commentId: T:System.ReadOnlySpan{SimulationFramework.MouseButton}
  parent: System
  definition: System.ReadOnlySpan`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<MouseButton>
  nameWithType: ReadOnlySpan<MouseButton>
  fullName: System.ReadOnlySpan<SimulationFramework.MouseButton>
  nameWithType.vb: ReadOnlySpan(Of MouseButton)
  fullName.vb: System.ReadOnlySpan(Of SimulationFramework.MouseButton)
  name.vb: ReadOnlySpan(Of MouseButton)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - uid: SimulationFramework.MouseButton
    name: MouseButton
    href: SimulationFramework.MouseButton.html
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - uid: SimulationFramework.MouseButton
    name: MouseButton
    href: SimulationFramework.MouseButton.html
  - name: )
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: SimulationFramework.Mouse.IsAnyButtonReleased*
  commentId: Overload:SimulationFramework.Mouse.IsAnyButtonReleased
  href: SimulationFramework.Mouse.html#SimulationFramework.Mouse.IsAnyButtonReleased
  name: IsAnyButtonReleased
  nameWithType: Mouse.IsAnyButtonReleased
  fullName: SimulationFramework.Mouse.IsAnyButtonReleased
- uid: SimulationFramework.Mouse.IsAnyButtonPressed*
  commentId: Overload:SimulationFramework.Mouse.IsAnyButtonPressed
  href: SimulationFramework.Mouse.html#SimulationFramework.Mouse.IsAnyButtonPressed
  name: IsAnyButtonPressed
  nameWithType: Mouse.IsAnyButtonPressed
  fullName: SimulationFramework.Mouse.IsAnyButtonPressed
